spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggradar(colour="blue")
# Use tidyr R package gather and spread to manipulate the data
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggradar(aes(colour="blue"))
# Use tidyr R package gather and spread to manipulate the data
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggradar(aes(color="blue"))
# Use tidyr R package gather and spread to manipulate the data
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggradar(aes(color=group))
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))
# Use tidyr R package gather and spread to manipulate the data
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggRadar(aes(color=group))
# Use tidyr R package gather and spread to manipulate the data
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggradar(group.colours="blue")
# Use tidyr R package gather and spread to manipulate the data
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))%>%
ggradar(group.colours="blue")+
geom_point_interactive(aes(x, y, size=experience,
tooltip=paste0("Tip: ",tip)),
colour="blue")
install.packages("ggiraphExtra")
library(ggRadar)
library(ggiraphExtra)
ggRadar(data=setupR,aes(group=skill))
ggRadar(data=setupR,aes(facet=skill))
ggRadar(data=setupR,aes(x=skill))
ggRadar(data=iris,aes(group=Species))
iris
ggRadar(data=setupR %>% select(skill,experience),aes(group=skill))
ggRadar(data=setupR %>% select(skill,experience))
ggRadar(data=setupR %>% select(skill,experience) %>% mutate_at(vars(-experience) ,funs(./6)))
setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))
# Use tidyr R package gather and spread to manipulate the data
groupdata <- setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))
ggRadar(data=groupdata)
View(groupdata)
groupdata
iris
groupdata
head(iris)
ggRadar(data=iris,aes(group=Species))
ggRadar(data=groupdata,aes(group=group))
ggRadar(data=iris,aes(group=Species))
ggRadar(data=groupdata,aes(group=group))
ggRadar(data=iris,aes(group=Species))
# Use tidyr R package gather and spread to manipulate the data
groupdata <- setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)
ggRadar(data=groupdata,aes(group=group))
# Use tidyr R package gather and spread to manipulate the data
groupdata <- setupR %>%
gather(key = group, value = value, 2:ncol(setupR)) %>%
spread(key = names(setupR)[1], value = "value") %>%
# Extract one feature of the skillset, the experience, to plot the radar line
filter(group=="experience") %>%
# Convert to numeric using dplyr mutate_at
mutate_at(vars(-group) ,as.numeric)%>%
# Rescale using dplyr mutate_at
mutate_at(vars(-group) ,funs(./6))
ggRadar(data=groupdata,aes(group=group))
View(groupdata)
ggRadar(data=groupdata,aes(group=experience))
data(acs)
data(mtcars)
ggRadar(data=mtcars,interactive=TRUE)
View(mtcars)
groupdata %>% t()
groupdata %>% t() %>% data.frame()
ggRadar(groupdata %>% t() %>% data.frame())
ggRadar(data=roupdata %>% t() %>% data.frame())
ggRadar(data=groupdata %>% t() %>% data.frame())
ggRadar(data=setupR%>%
select(skill,experience) %>%
# Rescale using dplyr mutate_at
mutate_at(vars(experience) ,funs(./6)))
library(radarchart)
chartJSRadar(scores = setupR, maxScale = 6)
setupR[1:2,]
chartJSRadar(scores = setupR[,1:3], maxScale = 6)
chartJSRadar(scores = setupR[,1:3], maxScale = 6,showToolTipLabel = setupR$tip)
# install.packages("tidyverse")
library(tidyverse)
library(ggiraph)
#devtools::install_github("ricardo-bion/ggradar",
#                          dependencies=TRUE)
library(ggradar)
#install.packages("ggiraphExtra")
library(ggiraphExtra)
# Try out  gridExtra to layout ggplot objects
ggiraph(code = print(g1),tooltip_extra_css = "background-color:gray;color:white;font-style:italic;padding:10px;border-radius:5px;fill:white;r:10pt;")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gganimate)
url <-  "https://raw.githubusercontent.com/andrewbprice/NBLShotCharts-D3/master/combinedShots_all.csv"
shots <- read_csv(url)
# View a summary statistics f the data
skimr::skim(shots)
# Clean the Result column and add a new TimeFrame column
shots <- shots %>%
# Recode the Result to a more descriptive categorical values Made and Missed
mutate(Result = ifelse(Result == 1,"Made", "Missed")) %>%
# F. Delaney is mispelt in some entries so we can recode to the correct spelling F. Delany
mutate(Player = ifelse(Player == "F. Delaney","F. Delany",Player))
# View the Season variable list
table(shots$Season)
# Check what teams are in the season 2016 ACB
shots %>% filter(Season=="2016 ACB") %>%
select(Team) %>%
table()
# Filter the breakers data by the 2016 ACB Season
shotsBreakers <- shots %>%
filter(Team=="New Zealand Breakers") %>%
filter(Season =="2016 ACB")
# View the total shots by Breakers players over the 2016 ACB season
totalshots <- table(shotsBreakers$Player,shotsBreakers$Result) %>%
as.data.frame() %>%
spread(key = Var2,value = Freq) %>%
mutate(TotalAttempts=(Made+Missed)) %>%
mutate(GoalPerc=Made/(Made+Missed)) %>%
arrange(desc(Made))
totalshots
# Select the highest scorer (although not the most accurate!) to view a breakdown of shots
shotsBreakers %>%
filter(Player=="T. Abercrombie")  %>%
select(PlayerNo,Player,opponent,ShotType,Result) %>%
group_by(Player,PlayerNo,opponent,ShotType,Result) %>%
dplyr::summarize(Total =n())
# Select highest scoring player to view the shots, Create
shotsBreakers  %>%
filter(Player =="T. Abercrombie") %>%
ggplot()  +
geom_point(aes(X,Y,color=Result),size=5) +
scale_color_manual(values=c("lightgreen","lightgrey")) +
# Add player number
geom_text(aes(x=X,y=Y,label=PlayerNo),color='black')+
# Remove gridlines
theme_classic() +
ggtitle("Shots by T. Abercrombie for 2016 ACB Season Breakers Season")
# Half court adapted from full court https://gist.github.com/edkupfer/6354964 code
halfcourt <- ggplot(data=data.frame(x=1,y=1),aes(x,y))+
###outside box:
geom_path(data=data.frame(x=c(0,0,50,50,0)*2,y=c(0,47,47,0,0)))+
###solid FT semicircle above FT line:
geom_path(data=data.frame(x=c(-6000:(-1)/1000,1:6000/1000)*2+50,y=-c(28-sqrt(6^2-c(-6000:(-1)/1000,1:6000/1000)^2))+47),aes(x=x,y=y))+
###dashed FT semicircle below FT line:
geom_path(data=data.frame(x=c(-6000:(-1)/1000,1:6000/1000)*2+50,y=-c(28+sqrt(6^2-c(-6000:(-1)/1000,1:6000/1000)^2))+47),aes(x=x,y=y),linetype='dashed')+
###key:
geom_path(data=data.frame(x=-c(-8,-8,8,8,-8)*2+50,y=-c(47,28,28,47,47)+47))+
###box inside the key:
geom_path(data=data.frame(x=c(-6,-6,6,6,-6)*2+50,y=-c(47,28,28,47,47)+47))+
###restricted area semicircle:
geom_path(data=data.frame(x=c(-4000:(-1)/1000,1:4000/1000)*2+50,y=-c(41.25-sqrt(4^2-c(-4000:(-1)/1000,1:4000/1000)^2))+47),aes(x=x,y=y))+
###rim:
geom_path(data=data.frame(x=c(-750:(-1)/1000,1:750/1000,750:1/1000,-1:-750/1000)*2+50,y=-c(c(41.75+sqrt(0.75^2-c(-750:(-1)/1000,1:750/1000)^2)),c(41.75-sqrt(0.75^2-c(750:1/1000,-1:-750/1000)^2)))+47),aes(x=x,y=y))+
###backboard:
geom_path(data=data.frame(x=c(-3,3)*2+50,y=-c(43,43)+47),lineend='butt')+
###three-point line:
geom_path(data=data.frame(x=c(-22,-22,-22000:(-1)/1000,1:22000/1000,22,22)*2+50,y=-c(47,47-169/12,41.75-sqrt(23.75^2-c(-22000:(-1)/1000,1:22000/1000)^2),47-169/12,47)+47),aes(x=x,y=y))+
# rotate the half court using coord_flip
coord_flip()
# Plot on half court split by player using facet_wrap
ACBplot <- halfcourt +
# We swap the X and Y coordinates to plot correctly on the coord_flipped halfcourt
geom_point(data=shotsBreakers,aes(Y,X,color=Result),size=5) +
# Add player number
geom_text(data=shotsBreakers,aes(x=Y,y=X,label=PlayerNo),color='black')+
scale_color_manual(values=c("lightgreen","lightgrey")) +
# Remove all plot details with theme_void
theme_void() +
ggtitle("Total Shots for Breakers 2016 ACB Season")+
facet_wrap(~Player)
ACBplot
# Save plot for blog
# ggsave("ACBplot.jpg",ACBplot )
# check NA in shotsBreakers
shotsBreakers %>%
filter(is.na(Quarter))
allseason <-  halfcourt  +
# We swap the X and Y coordinates to plot correctly on the coord_flipped halfcourt
geom_point(data=shotsBreakers ,aes(Y,X,color=Result,group=Quarter),size=3)  +
scale_color_manual(values=c("green","lightgrey"))+
# Remove all plot details with theme_void
theme_void()
# Let's view the total shots split by variable Quarter using facet_wrap
ACBbyfacet <- allseason +
facet_wrap(~Quarter)
ACBbyfacet
# Save plot for blog
ggsave("ACBbyfacet.jpg",ACBbyfacet )
# Animate using the new gganimate function transition_states
anim <- allseason +
labs(title = "Game quarter: {closest_state}")+
transition_states(Quarter,wrap =FALSE) +
enter_appear() +
exit_fade(alpha=0)
anim
# Save animation for blog
# anim_save("anim.gif",anim)
data(mpg)
ggplot(mpg, aes(class, image = class)) +
geom_textured_bar() +
scale_image_manual(values = images)
devtools::install_github("clauswilke/ggtextures")
library(ggtextures)
data(mpg)
images = c(
floor ="http://clipart-library.com/img1/1147897.jpg")
ggplot(mpg, aes(class, image = class)) +
geom_textured_bar() +
scale_image_manual(values = images)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("tidyverse")
library(tidyverse)
library(ggiraph)
# install.packages("ggiraphExtra")
library(ggiraphExtra)
library(tidygraph)
install.packagesw("igraph")
install.packages("igraph")
# install.packages("tidyverse")
library(tidyverse)
library(ggiraph)
# install.packages("ggiraphExtra")
library(ggiraphExtra)
library(tidygraph)
library(ggraph)
# setupR <- read_csv()
# Create dataframes
setupR <- data.frame(skill=c("Install RStudio", "Install R","Install R packages","Load Packages", "Update RStudio","Update R", "Update R packages","Basic debugging","Browser debugging"),
experience=c(6,6,6,6,6,3,6,5,1),
complexity=c(1,1,1,1,1,1,2,1,3),
tip=c("","","CRAN install.packages(), GitHub devtools, Jan-19 remotes ","","Nov-18 RStudio packages tab", "","", "Mar-16 Misspelling and punctuation",""),
date=c("Mar-16", "Mar-16", "Mar-16", "Mar-16", "Mar-16", "Mar-16", "Nov-18", "Mar-16", ""),
stringsAsFactors = FALSE)
objectsR <- data.frame(skill=c("Object assignment","Classes", "Scaler","Vectors","Factors","Matrices", "Arrays", "Dataframes", "Lists","Environments","Tibbles"),
experience=c(4,5,5,5,3,5,4,4,3,3,3),
complexity=c(3,1,1,1,1,1,1,1,3,3,3),
tip=c( "","lubridate for dates", "","c(), a:b, seq(), rep()","forcats", "Feb-19 Use for dataframe manipulation","","data.frame(name = c(),... )","","",""),
date=c("Mar-16","Mar-16","Mar-16", "Mar-16", "Mar-16", "Mar-16", "Mar-16", "Mar-16", "Mar-16","Sep-17","Jan-18"),
stringsAsFactors = FALSE)
# TODO Add testing and cooercion
functionsR <- data.frame(skill=c("Create a function", "Vector functions"),
experience=c(5,4),
complexity=c(1,1),
tip=c("function (x) { }","sum(), mean(), sd(), summary(), length(), unique(), table()"),
date=c("Mar-16","Mar-16"),
stringsAsFactors = FALSE)
importR <- data.frame(skill=c( "txt", "csv", "Excel"),
experience=c(5,5,5),
complexity=c(2,2,2),
tip=c("read.table()" ,"readxl read_csv()","readxl read_xls"),
date=c("Mar-16","Jun-17","Jun-17"),
stringsAsFactors = FALSE)
exportR <- data.frame(skill=c( "txt", "csv", "Excel"),
experience=c(5,5,5),
complexity=c(2,2,2),
tip=c("write.table()" ,"readxl write_csv()","readxl write_xls"),
date=c("Mar-16","Jun-17","Jun-17"),
stringsAsFactors = FALSE)
datamungingR <- data.frame(skill=c("Numerical Indexing", "Logical Indexing","Subset","Sorting","Combine","Summarise","Recoding","Reshape","Regex"),
experience=c(5,5,3,5,4,4,3,2,2),
complexity=c(2,2,2,2,2,3,3,5,5),
tip=c("[row,column], [[list]]","operators, & (and), | (or), %in%, is.na(), which()","dplyr select()","order(decreasing = TRUE)","merge(x,y,by=,all=)","aggregate(), dplyr group_by() summarise(n=n())","","tidyr gather() spread()","stringr"),
date=c("Mar-16", "Mar-16","Mar-16", "Mar-16", "Mar-16","Mar-16","Jun-17","Jun-17","Jun-17"),
stringsAsFactors = FALSE)
vizR <- data.frame(skill=c( "Base plots", "ggplot syntax","ggplot2 themes", "Interactive"),
experience=c(1,3,3,3),
complexity=c(1,1,3,5),
tip=c("","ggplot2","theme_*, Own theme gist", "ggiraph"),
date=c("Mar-16","Mar-16","Jun-17","Feb-17"),
stringsAsFactors = FALSE)
# Summary of setupR dataframe
str(setupR)
# Create a line road plot function
plotroad <- function(df,colourplot,xstart) {
n_road <- dim(df)[1]
x <- as.numeric(seq(xstart,n_road+xstart-1))
y <- df$complexity
dftoplot <- cbind(df,x,y)
thetitle <- deparse(substitute(df))
ggplot(data=dftoplot,aes(x,y))+
ggrepel::geom_text_repel(mapping=aes(label=skill,angle=90),
colour=colourplot,
fontface='bold',
nudge_y = 2,
segment.color = 'grey50')+
geom_line(data= dftoplot,aes(x,y),
# colour=colourplot,
size=2,
arrow=arrow(type="closed")) +
geom_point_interactive(aes(x, y, size=experience,
tooltip=paste0("Tip: ",tip)),
colour=colourplot,
#shape=1, Possibly change the shape later
show.legend = TRUE)+
scale_size_continuous(range = c(1,10))+
# Add the dataframe name as the title
ggtitle(paste0("Learning path of ",thetitle))+
# Set theme for ggplot
scale_x_discrete()+
scale_y_discrete()+
theme_void() +
theme(plot.title= element_text(family='',
face='bold',
colour=colourplot,
size=15))+
ylim(c(0,max(y)+3))
}
# Use ggiraph to plot an interactive bar chart with the tips as tooltips, let's first create the rest of the ggplot objects for each of the other roads
(g1 <- plotroad(setupR,"blue",4))
g2 <- plotroad(objectsR,"red",4)
g3 <- plotroad(importR,"hotpink",4)
g4 <- plotroad(functionsR,"darkgreen",2)
g5 <- plotroad(datamungingR,"lightblue",10)
g6 <- plotroad(vizR,"green",12)
# Try out  gridExtra to layout ggplot objects
ggiraph(code = print(gridExtra::grid.arrange(g1,g2,g3,g4,g5,g6, nrow = 6)),tooltip_extra_css = "background-color:gray;color:white;font-style:italic;padding:10px;border-radius:5px;fill:white;r:10pt;")
setupR <- setupR %>%
# Adds a column with the values from the row ids at the start of the data frame
rowid_to_column("id")
# In the line plots we used the dots for the skills, so create nodes for each of the skills with unique ids, and the node name as label
(nodes <- tibble(label=setupR$skill) %>%
# Adds a column with the values from the row ids at the start of the data frame
rowid_to_column("id"))
# Since this dataframe has a sequential route, let's create a route table with from and to ids - this code could be improved but it made sense at the time!)
route <- tibble(from = setupR$id,
to = c(setupR$id[-1],setupR$id[9]))
(edges <- route %>%
# Use a left join where the key from in route and id in setupR
left_join(setupR, by = c("from" = "id")) %>%
select(from,to,experience) %>%
# If the edges have magnitude then this is referred to as weight. Initially set the complexity as the weight
rename(weight=complexity))
(edges <- route %>%
# Use a left join where the key from in route and id in setupR
left_join(setupR, by = c("from" = "id")) %>%
select(from,to,complexity) %>%
# If the edges have magnitude then this is referred to as weight. Initially set the complexity as the weight
rename(weight=complexity))
# Skip along the tutorial to the tidygraph and ggraph sections, to create a network object using tbl_graph
(routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE))
# Skip along the tutorial to the tidygraph and ggraph sections, to create a network object using tbl_graph
(routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE))
class(routes_tidy)
# As per the documentation nodes must be a dataframe with least on ecolumn id
visNetwork::visNetwork(nodes,edges) %>%
# The direction of the dges is meaningful so this is a directed network and we will include arrows
visNetwork::visEdges(arrows = "middle")
(nodes <- setupR %>%
rename(label=skill) %>%
rename(value=experience) %>%
rename(title=tip) %>%
mutate(color=rep("blue",dim(setupR)[1])) %>%
mutate(group=rep("setupR",dim(setupR)[1])))
# As per the documentation nodes must be a dataframe with least on ecolumn id
visNetwork::visNetwork(nodes,edges) %>%
# The direction of the dges is meaningful so this is a directed network and we will include arrows
visNetwork::visEdges(arrows = "middle")
setupR[-1,]
setupR[,-1]
rbind(setupR[,-1],objectsR)
bind_rows(setupR %>% select(-id),objectsR)
nodes <- bind_rows(setupR %>% select(-id),objectsR)
bind_rows(setupR %>%
select(-id) %>%
mutate(color=rep("blue",dim(setupR)[1])) %>%
mutate(group=rep("setupR",dim(setupR)[1]),
objectsR %>%
mutate(color=rep("red",dim(objectsR)[1]))%>%
mutate(group=rep("objectsR",dim(objectsR)[1]))
)
(nodes <- bind_rows(setupR %>%
select(-id) %>%
mutate(color=rep("blue",dim(setupR)[1])) %>%
mutate(group=rep("setupR",dim(setupR)[1])),
objectsR %>%
mutate(color=rep("red",dim(objectsR)[1]))%>%
mutate(group=rep("objectsR",dim(objectsR)[1]))
)  %>%
rename(label=skill) %>%
rename(value=experience) %>%
rename(title=tip) )
View(nodes)
# As per the documentation nodes must be a dataframe with least on ecolumn id
visNetwork::visNetwork(nodes,edges) %>%
# The direction of the dges is meaningful so this is a directed network and we will include arrows
visNetwork::visEdges(arrows = "middle")
(nodes <- bind_rows(setupR %>%
select(-id) %>%
mutate(color=rep("blue",dim(setupR)[1])) %>%
mutate(group=rep("setupR",dim(setupR)[1])),
objectsR %>%
mutate(color=rep("red",dim(objectsR)[1]))%>%
mutate(group=rep("objectsR",dim(objectsR)[1]))
)  %>%
rename(label=skill) %>%
rename(value=experience) %>%
rename(title=tip) %>%
# Adds a column with the values from the row ids at the start of the data frame
rowid_to_column("id"))
# As per the documentation nodes must be a dataframe with least on ecolumn id
visNetwork::visNetwork(nodes,edges) %>%
# The direction of the dges is meaningful so this is a directed network and we will include arrows
visNetwork::visEdges(arrows = "middle")
View(nodes)
route <- tibble(from = nodes$id,
to = c(nodes$id[-1],nodes$id[20]))
(edges <- route %>%
# Add weight variable
mutate(weight=1))
# As per the documentation nodes must be a dataframe with least on ecolumn id
visNetwork::visNetwork(nodes,edges) %>%
# The direction of the dges is meaningful so this is a directed network and we will include arrows
visNetwork::visEdges(arrows = "middle")
install.packages("rhub")
library(rhub)
validate_email()
rhub::validate_email()
rhub::check_for_cran()
library(rhub)
rhub::check_for_cran()
library(blogdown)
setwd("~/")
setwd("~/auckland2020")
serve_site() # Allows you to preview a working version of your site and provide any errors to be fixed
